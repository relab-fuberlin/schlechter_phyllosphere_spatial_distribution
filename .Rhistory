vars = c("logCell", "cfu_log"),
alternative = "greater"
)
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "spearman"
)
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "pearson"
)
data_cell %>%
cor_test(
vars = c("cfu_log", "logCell"),
alternative = "greater",
method = "pearson"
)
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "pearson",
conf.level = 0.99
)
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "pearson",
conf.level = 0.95
)
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
#alternative = "greater",
method = "pearson",
conf.level = 0.95
)
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "pearson",
conf.level = 0.95
)
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
#alternative = "greater",
method = "pearson",
conf.level = 0.95
)
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "pearson",
conf.level = 0.95
)
data_cell <- read.csv(here("results", "cell_density.csv")) %>%
rename(sample = rep) %>%
left_join(., read.csv(here("results", "cfu_data_processed.csv")), by=c("exp", "dpi", "synID", "comID", "syncom", "strain", "sample")) %>%
mutate(dpi = factor(dpi),
synID = factor(synID),
taxa = factor(taxa),
strain = factor(strain))
data_cell <- read.csv(here("results", "cell_density.csv")) %>%
rename(sample = rep) %>%
left_join(., read.csv(here("results", "cfu_data_processed.csv")), by=c("exp", "dpi", "synID", "comID", "syncom", "strain", "sample")) %>%
mutate(dpi = factor(dpi),
synID = factor(synID),
taxa = factor(taxa),
strain = factor(strain))
```{r}
data_cell %>% head
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "pearson",
conf.level = 0.95
)
data_cell <- read.csv(here("results", "cell_density.csv")) %>%
rename(sample = rep) %>%
left_join(., read.csv(here("results", "cfu_data_processed.csv")), by=c("exp", "dpi", "synID", "comID", "syncom", "strain", "sample")) %>%
na.omit %>%
mutate(dpi = factor(dpi),
synID = factor(synID),
taxa = factor(taxa),
strain = factor(strain))
data_cell
is.na(data_cell)
plt.cell.stat
plt3.a
plt3.b
plt3.c
areas <- c(patchwork::area(1,1,3), patchwork::area(1,2,1), patchwork::area(2,2,3))
wrap_elements(full = plt3.a) + plt3.b + plt3.c  + plot_annotation(tag_levels = "A") + plot_layout(design = areas, guides = "collect") & theme(legend.box.just = "center")
areas <- c(patchwork::area(1,1,3), patchwork::area(1,2,1), patchwork::area(2,2,3))
wrap_elements(full = plt3.a) + plt3.b + plt3.c  + plot_annotation(tag_levels = "A") + plot_layout(design = areas, guides = "collect") & theme(legend.box.just = "center")
inner_join(dunntest_taxa, fold_taxa, by = c("taxa", "synID")) %>%
filter(group1 == "C")
inner_join(dunntest_taxa, fold_taxa, by = c("taxa", "synID")) %>%
filter(group1 == "C")
plt3.b <- inner_join(dunntest_taxa, fold_taxa, by = c("taxa", "synID")) %>%
filter(group1 == "C") %>% na.omit %>%
ggplot(aes(x=synID, y=taxa))+
geom_tile(colour= "black", fill= "white", linewidth = 0.1)+
geom_point(aes(fill = log2FC, size = p_size), shape = 21)+
coord_fixed()+
scale_fill_gradientn(name = bquote(Log[2]~"FC"), colours = wes_palette("Zissou1")[c(1,2,3,5)],
values = c(0,0.67,1), limits=c(-3.5,1), breaks=seq(-3,1,1), na.value = 'grey90')+
scale_size_continuous(range = c(12,2), breaks = c(0.05, 0.5, 1), limits = c(0,1),
label = c("< 0.05", "0.5", "1.0"), name = expression(paste(italic("P"), "-adjusted")))+
scale_y_discrete(name="", labels = taxa.lab)+
labs(x = "")+
theme_rs()+
theme(panel.border = element_blank(),
axis.text.x = element_text(hjust=0.5, vjust=3),
axis.text.y = element_text(face="italic"),
strip.text = element_text(face="plain"))
plt3.b
data_cell %>% tally
data_cell %>% group_by(synID) %>% tally
is.na(data_cell)
data_cell[is.na(data.cell)]
data_cell[is.na(data_cell)]
data_cell[!is.na(data_cell)]
# Kruskal-Wallis test and effect size for community complexity (synID)
kw_synID = kruskal.test(logCell ~ synID, data_cell) %>% tidy %>%
mutate(p_label = case_when(p.value < 0.05 ~ "< 0.05", TRUE ~ as.character(p.value)))
keff_synID = kruskal_effsize(formula = logCell ~ synID, data = data_cell, ci=TRUE, nboot=100)
# Dunn's Test
dunn_synID = dunn_test(logCell ~ synID, p.adjust.method = "holm", data=data_cell) %>% tibble %>%
mutate(p_label = case_when(p.adj < 0.05 ~ "< 0.05", TRUE ~ as.character(p.adj)))
# Fold change of population density by SynCom complexity (synID)
fc_cell_synID = data_cell %>%
group_by(synID) %>%
summarise(median_cell = median(cell_area)) %>%
mutate(FC = median_cell/median_cell[1],
logFC = log2(FC))
fc_cell_synID
# Wilcoxon test and effect size for sampling time (dpi)
w_dpi = wilcox.test(formula = logCell ~ dpi, data = data_cell) %>% tidy %>%
mutate(p_label = case_when(p.value < 0.05 ~ "< 0.05", TRUE ~ as.character(p.value)))
# Fold change of population density by time of sampling (dpi)
fc_cell_dpi = data_cell %>%
group_by(dpi) %>%
summarise(median_cell = median(cell_area)) %>%
mutate(FC = median_cell/median_cell[1],
logFC = log2(FC))
fc_cell_dpi
# Wilcoxon test and effect size for bacterial group (taxa)
w_taxa = wilcox.test(formula = logCell ~ taxa, data = data_cell) %>% tidy %>%
mutate(p_label = case_when(p.value < 0.05 ~ "< 0.05", TRUE ~ as.character(p.value)))
weff_taxa = wilcox_effsize(formula = logCell ~ taxa, data = data_cell, ci=TRUE, nboot=100)
# Fold change of population density by bacterial group (taxa)
fc_cell_taxa = data_cell %>%
group_by(taxa) %>%
summarise(median_cell = median(cell_area)) %>%
mutate(FC = median_cell/median_cell[1],
logFC = log2(FC))
fc_cell_taxa
weff_taxa
## Variables
explanatory = "synID"
taxa = "taxa"
strain = "strain"
# Fold change of population density by taxa and dpi
dunntest_taxa <- dun_func1(data_cell, "logCell", taxa, explanatory) %>% rename(synID = group2)
fold_taxa <- fold_func1(data_cell, "cell_area", taxa, explanatory)
# Fold change of population density by strain and dpi
dunntest_strain <- dun_func1(data_cell, "logCell", strain, explanatory) %>% rename(synID = group2)
fold_strain <- fold_func1(data_cell, "cell_area", strain, explanatory)
dunntest_taxa
fold_taxa
dunntest_taxa
# Plot CFU
# Multiple comparisons
plt.cell.stat = dunn_synID %>%
mutate(p.adj.signif = case_when(p.adj.signif == "****" ~ "*", TRUE ~ p.adj.signif), y.position = c(7.5,8.5,8))
plt.cell.stat
plt.cell.stat
plt3.a
plt3.a <- data_cell %>%
ggplot(aes(synID, logCell))+
stat_eye(
side="right",
adjust = 1,
justification = -0.3,
.width = 0,
scale = 0.5,
point_colour = NA)+
geom_jitter(width = 0.1, alpha = 0.1)+
geom_boxplot(fill="white", width=0.2, outlier.alpha = 0)+
coord_cartesian(xlim=c(1,3.2))+
stat_pvalue_manual(
data = plt.cell.stat,
size = 5,
label = "p.adj.signif",
xmin = "group1", xmax = "group2",
y.position = "y.position")+
scale_y_continuous(limits = c(3.5,9), breaks=c(4,6,8))+
labs(y = plt_bac_cell_density_lab,
x = "SynCom")+
theme_rs()+
theme(axis.text.x = element_text(hjust=0.5, vjust=1.5))
plt3.a
data_cell <- read.csv(here("results", "cell_density.csv")) %>%
na.omit %>%
rename(sample = rep) %>%
left_join(., read.csv(here("results", "cfu_data_processed.csv")), by=c("exp", "dpi", "synID", "comID", "syncom", "strain", "sample")) %>%
mutate(dpi = factor(dpi),
synID = factor(synID),
taxa = factor(taxa),
strain = factor(strain))
data_cell %>% head
# Correlation between bacterial densities determined by CFU or by cell counts
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "pearson",
conf.level = 0.95
)
linear_cell = lm(logCell ~ synID + dpi + taxa, data_cell)
# Shapiro-Wilk test for normality
cell_normality = shapiro.test(rstandard(linear_cell))
cell_normality
# Breusch-Pagan test for homogeneity of variances
cell_homoskedasticity = ncvTest(linear_cell)
cell_homoskedasticity
# Kruskal-Wallis test and effect size for community complexity (synID)
kw_synID = kruskal.test(logCell ~ synID, data_cell) %>% tidy %>%
mutate(p_label = case_when(p.value < 0.05 ~ "< 0.05", TRUE ~ as.character(p.value)))
keff_synID = kruskal_effsize(formula = logCell ~ synID, data = data_cell, ci=TRUE, nboot=100)
kw_synID
keff_synID
# Dunn's Test
dunn_synID = dunn_test(logCell ~ synID, p.adjust.method = "holm", data=data_cell) %>% tibble %>%
mutate(p_label = case_when(p.adj < 0.05 ~ "< 0.05", TRUE ~ as.character(p.adj)))
dunn_synID
# Fold change of population density by SynCom complexity (synID)
fc_cell_synID = data_cell %>%
group_by(synID) %>%
summarise(median_cell = median(cell_area)) %>%
mutate(FC = median_cell/median_cell[1],
logFC = log2(FC))
fc_cell_synID
# Wilcoxon test and effect size for sampling time (dpi)
w_dpi = wilcox.test(formula = logCell ~ dpi, data = data_cell) %>% tidy %>%
mutate(p_label = case_when(p.value < 0.05 ~ "< 0.05", TRUE ~ as.character(p.value)))
w_dpi
# Fold change of population density by time of sampling (dpi)
fc_cell_dpi = data_cell %>%
group_by(dpi) %>%
summarise(median_cell = median(cell_area)) %>%
mutate(FC = median_cell/median_cell[1],
logFC = log2(FC))
fc_cell_dpi
# Wilcoxon test and effect size for bacterial group (taxa)
w_taxa = wilcox.test(formula = logCell ~ taxa, data = data_cell) %>% tidy %>%
mutate(p_label = case_when(p.value < 0.05 ~ "< 0.05", TRUE ~ as.character(p.value)))
weff_taxa = wilcox_effsize(formula = logCell ~ taxa, data = data_cell, ci=TRUE, nboot=100)
w_taxa
weff_taxa
# Fold change of population density by bacterial group (taxa)
fc_cell_taxa = data_cell %>%
group_by(taxa) %>%
summarise(median_cell = median(cell_area)) %>%
mutate(FC = median_cell/median_cell[1],
logFC = log2(FC))
fc_cell_taxa
## Variables
explanatory = "synID"
taxa = "taxa"
strain = "strain"
# Fold change of population density by taxa and dpi
dunntest_taxa <- dun_func1(data_cell, "logCell", taxa, explanatory) %>% rename(synID = group2)
fold_taxa <- fold_func1(data_cell, "cell_area", taxa, explanatory)
dunntest_taxa
fold_taxa
# Fold change of population density by strain and dpi
dunntest_strain <- dun_func1(data_cell, "logCell", strain, explanatory) %>% rename(synID = group2)
# Fold change of population density by strain and dpi
dunntest_strain <- dun_func1(data_cell, "logCell", strain, explanatory) %>% rename(synID = group2)
fold_strain <- fold_func1(data_cell, "cell_area", strain, explanatory)
```{r figure_main_5_setup, include = FALSE}
# Plot CFU
# Multiple comparisons
plt.cell.stat = dunn_synID %>%
mutate(p.adj.signif = case_when(p.adj.signif == "****" ~ "*", TRUE ~ p.adj.signif), y.position = c(7.5,8.5,8))
plt.cell.stat
plt.cell.stat
plt.cell.stat
plt.cell.stat
# Plot CFU
# Multiple comparisons
plt.cell.stat = dunn_synID %>%
mutate(p.adj.signif = case_when(p.adj.signif == "****" ~ "*", TRUE ~ p.adj.signif), y.position = c(7.5,8.5,8))
plt3.a <- data_cell %>%
ggplot(aes(synID, logCell))+
stat_eye(
side="right",
adjust = 1,
justification = -0.3,
.width = 0,
scale = 0.5,
point_colour = NA)+
geom_jitter(width = 0.1, alpha = 0.1)+
geom_boxplot(fill="white", width=0.2, outlier.alpha = 0)+
coord_cartesian(xlim=c(1,3.2))+
stat_pvalue_manual(
data = plt.cell.stat,
size = 5,
label = "p.adj.signif",
xmin = "group1", xmax = "group2",
y.position = "y.position")+
scale_y_continuous(limits = c(3.5,9), breaks=c(4,6,8))+
labs(y = plt_bac_cell_density_lab,
x = "SynCom")+
theme_rs()+
theme(axis.text.x = element_text(hjust=0.5, vjust=1.5))
plt3.b <- inner_join(dunntest_taxa, fold_taxa, by = c("taxa", "synID")) %>%
filter(group1 == "C") %>%
ggplot(aes(x=synID, y=taxa))+
geom_tile(colour= "black", fill= "white", linewidth = 0.1)+
geom_point(aes(fill = log2FC, size = p_size), shape = 21)+
coord_fixed()+
scale_fill_gradientn(name = bquote(Log[2]~"FC"), colours = wes_palette("Zissou1")[c(1,2,3,5)],
values = c(0,0.67,1), limits=c(-3.5,1), breaks=seq(-3,1,1), na.value = 'grey90')+
scale_size_continuous(range = c(12,2), breaks = c(0.05, 0.5, 1), limits = c(0,1),
label = c("< 0.05", "0.5", "1.0"), name = expression(paste(italic("P"), "-adjusted")))+
scale_y_discrete(name="", labels = taxa.lab)+
labs(x = "")+
theme_rs()+
theme(panel.border = element_blank(),
axis.text.x = element_text(hjust=0.5, vjust=3),
axis.text.y = element_text(face="italic"),
strip.text = element_text(face="plain"))
plt3.c <- inner_join(dunntest_strain, fold_strain, by = c("strain", "synID")) %>%
filter(group1 == "C") %>%
ggplot(aes(x=synID, y=strain))+
geom_tile(colour= "black", fill= "white", linewidth = 0.1)+
geom_point(aes(fill = log2FC, size = p_size), shape = 21)+
coord_fixed()+
scale_fill_gradientn(name = bquote(Log[2]~"FC"), colours = wes_palette("Zissou1")[c(1,2,3,5)],
values = c(0,0.67,1), limits=c(-3.5,1), breaks=seq(-3,1,1), na.value = 'grey90')+
scale_size_continuous(range = c(12,2), breaks = c(0.05, 0.5, 1), limits = c(0,1),
label = c("< 0.05", "0.5", "1.0"), name = expression(paste(italic("P"), "-adjusted")))+
scale_y_discrete(name="", labels = sp.lab)+
labs(x = "")+
theme_rs()+
theme(panel.border = element_blank(),
axis.text.x = element_text(hjust=0.5, vjust=3),
strip.text = element_text(face="plain"))+
guides(size = "none", fill="none")
```{r figure_main_5, fig.id=TRUE, fig.cap="Bacterial cell density in the arabidopsis phyllosphere", dev = c("png", "tiff"), fig.dim=c(7,5)}
areas <- c(patchwork::area(1,1,3), patchwork::area(1,2,1), patchwork::area(2,2,3))
wrap_elements(full = plt3.a) + plt3.b + plt3.c  + plot_annotation(tag_levels = "A") + plot_layout(design = areas, guides = "collect") & theme(legend.box.just = "center")
plt3.b
plt3.b
inner_join(dunntest_taxa, fold_taxa, by = c("taxa", "synID")) %>%
filter(group1 == "C")
data_cell[is.na(data_cell)]
data_cell[,is.na(data_cell)]
data_cell[is.na(data_cell),]
inner_join(dunntest_taxa, fold_taxa, by = c("taxa", "synID")) %>%
filter(group1 == "C") %>% na.omit
plt3.b <- inner_join(dunntest_taxa, fold_taxa, by = c("taxa", "synID")) %>%
filter(group1 == "C") %>%
na.omit %>%
ggplot(aes(x=synID, y=taxa))+
geom_tile(colour= "black", fill= "white", linewidth = 0.1)+
geom_point(aes(fill = log2FC, size = p_size), shape = 21)+
coord_fixed()+
scale_fill_gradientn(name = bquote(Log[2]~"FC"), colours = wes_palette("Zissou1")[c(1,2,3,5)],
values = c(0,0.67,1), limits=c(-3.5,1), breaks=seq(-3,1,1), na.value = 'grey90')+
scale_size_continuous(range = c(12,2), breaks = c(0.05, 0.5, 1), limits = c(0,1),
label = c("< 0.05", "0.5", "1.0"), name = expression(paste(italic("P"), "-adjusted")))+
scale_y_discrete(name="", labels = taxa.lab)+
labs(x = "")+
theme_rs()+
theme(panel.border = element_blank(),
axis.text.x = element_text(hjust=0.5, vjust=3),
axis.text.y = element_text(face="italic"),
strip.text = element_text(face="plain"))
plt3.b
plt3.c <- inner_join(dunntest_strain, fold_strain, by = c("strain", "synID")) %>%
filter(group1 == "C") %>%
ggplot(aes(x=synID, y=strain))+
geom_tile(colour= "black", fill= "white", linewidth = 0.1)+
geom_point(aes(fill = log2FC, size = p_size), shape = 21)+
coord_fixed()+
scale_fill_gradientn(name = bquote(Log[2]~"FC"), colours = wes_palette("Zissou1")[c(1,2,3,5)],
values = c(0,0.67,1), limits=c(-3.5,1), breaks=seq(-3,1,1), na.value = 'grey90')+
scale_size_continuous(range = c(12,2), breaks = c(0.05, 0.5, 1), limits = c(0,1),
label = c("< 0.05", "0.5", "1.0"), name = expression(paste(italic("P"), "-adjusted")))+
scale_y_discrete(name="", labels = sp.lab)+
labs(x = "")+
theme_rs()+
theme(panel.border = element_blank(),
axis.text.x = element_text(hjust=0.5, vjust=3),
strip.text = element_text(face="plain"))+
guides(size = "none", fill="none")
plt3.c
areas <- c(patchwork::area(1,1,3), patchwork::area(1,2,1), patchwork::area(2,2,3))
wrap_elements(full = plt3.a) + plt3.b + plt3.c  + plot_annotation(tag_levels = "A") + plot_layout(design = areas, guides = "collect") & theme(legend.box.just = "center")
data_cell <- read.csv(here("results", "cell_density.csv")) %>%
na.omit %>%
rename(sample = rep) %>%
left_join(., read.csv(here("results", "cfu_data_processed.csv")), by=c("exp", "dpi", "synID", "comID", "syncom", "strain", "sample")) %>%
mutate(dpi = factor(dpi),
synID = factor(synID),
strain = factor(strain))
data_cell
data_cell[,is.na(data_cell)]
data_cell[is.na(data_cell),]
data_cell <- read.csv(here("results", "cell_density.csv")) %>%
rename(sample = rep) %>%
left_join(., read.csv(here("results", "cfu_data_processed.csv")), by=c("exp", "dpi", "synID", "comID", "syncom", "strain", "sample")) %>%
mutate(dpi = factor(dpi),
synID = factor(synID),
strain = factor(strain))
data_cell[is.na(data_cell),]
data_cell <- read.csv(here("results", "cell_density.csv")) %>%
rename(sample = rep) %>%
left_join(., read.csv(here("results", "cfu_data_processed.csv")), by=c("exp", "dpi", "synID", "comID", "syncom", "strain", "sample")) %>%
mutate(dpi = factor(dpi),
synID = factor(synID),
strain = factor(strain)) %>%
na.omit
data_cell[is.na(data_cell),]
data_cell %>% head
# Correlation between bacterial densities determined by CFU or by cell counts
data_cell %>%
cor_test(
vars = c("logCell", "cfu_log"),
alternative = "greater",
method = "pearson",
conf.level = 0.95
)
data_cell <- read.csv(here("results", "cell_density.csv"))
data_cell[is.na(data_cell)]
read.csv(here("results", "cfu_data_processed.csv"))
read.csv(here("results", "cfu_data_processed.csv")) %>% is.na
data_cell <- read.csv(here("results", "cell_density.csv")) %>%
rename(sample = rep) %>%
inner_join(., read.csv(here("results", "cfu_data_processed.csv")), by=c("exp", "dpi", "synID", "comID", "syncom", "strain", "sample")) %>%
mutate(dpi = factor(dpi),
synID = factor(synID),
strain = factor(strain)) %>%
na.omit
data_cell[is.na(data_cell)]
data_cell %>% head
read.csv(here("results", "cfu_data_processed.csv"))
read.csv(here("results", "cell_density.csv"))
library(tidyverse)
# Area in cm2
area = 124.94*100.24*1e-8
# Coordinates data
# Each entry represents one individual cell
data <- readRDS(here('results', 'coordinates.rds'))
# Metadata includes biological replicates (rep) and number of images taken
metadata <- read.csv(here('data', 'metadata.csv')) %>%
pivot_longer(cols=c(C0, C1, C2), names_to = "channel", values_to = "strain") %>%
na.omit
# Combine data with metadata
combined_data <- data %>%
group_by(channel, exp, synID, comID, syncom, img) %>%
tally %>%
left_join(metadata, ., by = c("channel", "exp", "synID", "comID", "syncom", "img")) %>%
na.omit
# Number of cells per field of views
combined_data %>%
pivot_wider(id_cols = c(exp, dpi, synID, comID, syncom, img),
names_from = channel, values_from = n, values_fill = 0, values_fn = mean) %>%
group_by(exp, dpi, synID, comID, syncom) %>%
summarise(nFOV = max(img),
nC0 = sum(C0),
nC1 = sum(C1),
nC2 = sum(C2),
.groups = "drop") %>%
mutate(sumCell = nC0 + nC1 + nC2,
avCell = sumCell/nFOV) %>%
write.csv(here('results', 'nfov.csv'), row.names = FALSE)
# Coordinates data
# Each entry represents one individual cell
data <- readRDS(here('results', 'coordinates.rds'))
# Metadata includes biological replicates (rep) and number of images taken
metadata <- read.csv(here('data', 'metadata.csv')) %>%
pivot_longer(cols=c(C0, C1, C2), names_to = "channel", values_to = "strain") %>%
na.omit
combined_data
data %>%
group_by(channel, exp, synID, comID, syncom, img) %>%
tally
knitr::opts_chunk$set(echo = TRUE, fig.align='center', dpi = 300, cache = TRUE)
options(digits = 2, scipen = 1, pillar.signif = 3)
library(here)
source(here('code', 'libraries_syncom.R'))
source(here('code', 'palette_syncom.R'))
source(here('code', 'theme_rs_spatial.R'))
source(here('code', 'dunnet_function.R'))
library(rstatix)
library(coin)
set.seed(19900725)
data_fold_S3
